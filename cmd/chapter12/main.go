package main

import (
	"fmt"
	"math"
)

func main() {
	var s int8 = 127
	s += 1
	println(s) // -128

	u := uint8(1)
	u -= 2
	println(u) // 255

	// 数值字面值(Number Literal)
	a1 := 5_3_7        // 十进制: 537
	b1 := 0b_1000_0111 // 二进制位表示为10000111
	b2 := 0b_1000_0111 // 二进制位表示为10000111
	c1 := 0_700        // 八进制: 0700
	c2 := 0o_700       // 八进制: 0700
	d1 := 0x_aabbcc    // 十六进制，以"0x"为前缀
	d2 := 0x_ddeeff    // 十六进制，以"0X"为前缀
	println(a1, b1, b2, c1, c2, d1, d2)
	// 537 135 135 448 448 11189196 14544639

	var a int8 = 59
	fmt.Printf("%b\n", a) // 输出二进制:111011
	fmt.Printf("%d\n", a) // 输出十进制:59
	fmt.Printf("%o\n", a) // 输出八进制:73
	fmt.Printf("%O\n", a) // 输出八进制(带0o前缀):0o73
	fmt.Printf("%x\n", a) // 输出十六进制(小写):3b
	fmt.Printf("%X\n", a) // 输出十六进制(大写):3B

	var f float32 = 139.8125
	bits := math.Float32bits(f)
	fmt.Printf("%b\n", bits)
	// 1000011000010111101000000000000

	var fl1 float32 = 16777216.0
	fmt.Printf("16777216.0:%b\n", math.Float32bits(fl1))
	// 1 0000 0000 0000 0000 0000 0000
	// 指数 24
	// 24+127 = 151d    10010111b
	// 0_10010111_0000 0000 0000 0000 0000 0000 尾数只能23所以要砍掉最后1位的0
	// 0_10010111_0000 0000 0000 0000 0000 000
	// 10010111_00000000000000000000000

	var fl2 float32 = 16777217.0
	fmt.Printf("16777217.0:%b\n", math.Float32bits(fl2))
	// 1 0000 0000 0000 0000 0000 0001
	// 指数 24
	// 24+127 = 151d    10010111b
	// 0_10010111_0000 0000 0000 0000 0000 0001 尾数只能23所以要砍掉最后1位的1
	// 0_10010111_0000 0000 0000 0000 0000 000
	// 10010111_00000000000000000000000
	fmt.Printf("from0b:%f\n", math.Float32frombits(0b_10010111_00000000000000000000000))
	// from0b:16777216.000000
	// 也就是说 16777217.0 约等于 16777216.0
	// 16777217.0 -> 16777216.0

	fmt.Println(fl1 == fl2) // true
	// 所以 fl1 == fl2

	fmt.Printf("16777216.0:%b\n", math.Float32bits(float32(16777216.0)))
	fmt.Printf("16777217.0:%b\n", math.Float32bits(float32(16777217.0)))
	//16777216.0:1001011100000000000000000000000
	//16777217.0:1001011100000000000000000000000
	fmt.Printf("16777218.0:%b\n", math.Float32bits(float32(16777218.0)))
	//16777218.0:1001011100000000000000000000001
	fmt.Printf("16777219.0:%b\n", math.Float32bits(float32(16777219.0)))
	fmt.Printf("16777220.0:%b\n", math.Float32bits(float32(16777220.0)))
	fmt.Printf("16777221.0:%b\n", math.Float32bits(float32(16777221.0)))
	//16777219.0:1001011100000000000000000000010
	//16777220.0:1001011100000000000000000000010
	//16777221.0:1001011100000000000000000000010
	fmt.Printf("16777222.0:%b\n", math.Float32bits(float32(16777222.0)))
	//16777222.0:1001011100000000000000000000011
	fmt.Printf("16777223.0:%b\n", math.Float32bits(float32(16777223.0)))
	fmt.Printf("16777224.0:%b\n", math.Float32bits(float32(16777224.0)))
	fmt.Printf("16777225.0:%b\n", math.Float32bits(float32(16777225.0)))
	//16777223.0:1001011100000000000000000000100
	//16777224.0:1001011100000000000000000000100
	//16777225.0:1001011100000000000000000000100
	fmt.Printf("16777226.0:%b\n", math.Float32bits(float32(16777226.0)))
	//16777226.0:1001011100000000000000000000101
	fmt.Printf("16777227.0:%b\n", math.Float32bits(float32(16777227.0)))
	fmt.Printf("16777228.0:%b\n", math.Float32bits(float32(16777228.0)))
	fmt.Printf("16777229.0:%b\n", math.Float32bits(float32(16777229.0)))
	//16777227.0:1001011100000000000000000000110
	//16777228.0:1001011100000000000000000000110
	//16777229.0:1001011100000000000000000000110

	fmt.Printf("000:%f\n", math.Float32frombits(0b_10010111_00000000000000000000000))
	// 000:16777216.000000
	fmt.Printf("001:%f\n", math.Float32frombits(0b_10010111_00000000000000000000001))
	// 001:16777218.000000
	fmt.Printf("010:%f\n", math.Float32frombits(0b_10010111_00000000000000000000010))
	// 010:16777220.000000
	fmt.Printf("011:%f\n", math.Float32frombits(0b_10010111_00000000000000000000011))
	// 011:16777222.000000

	fmt.Printf("%f\n", 6674.28e-2)
	fmt.Printf("%f\n", .12345e+5)
	fmt.Printf("%f\n", 0x2.p10)
	fmt.Printf("%f\n", 0x1.Fp+0)
	//66.742800
	//12345.000000
	//2048.000000
	//1.937500

	var fl10 float64 = 123.45678
	fmt.Printf("%f\n", fl10)
	// 十进制的科学计数法
	fmt.Printf("%e\n", fl10)
	// 十六进制的科学计数法
	fmt.Printf("%x\n", fl10)
	//123.456780
	//1.234568e+02
	//0x1.edd3be22e5de1p+06

	type MyInt = int32

	var n int32 = 6
	var n1 MyInt = n
	fmt.Println(n1)
}
